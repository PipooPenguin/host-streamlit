import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, OneHotEncoder
from assets.table.Dataframe_to_Table import draw_table


# H√†m x·ª≠ l√Ω d·ªØ li·ªáu
def identify_data_types(df):
    st.markdown("<div class='step-title'>X√°c ƒë·ªãnh lo·∫°i thu·ªôc t√≠nh</div>", unsafe_allow_html=True)
    data_types = {}
    for col in df.columns:
        if df[col].dtype == 'object':
            unique_vals = df[col].nunique()
            data_types[col] = "Categorical" if unique_vals > 2 else "Binary"
        elif df[col].dtype in ['int64', 'float64']:
            data_types[col] = "Numerical"
        else:
            data_types[col] = "Other"
    st.write(data_types)
    return data_types

def fill_missing_values(df):
    st.markdown("<div class='step-title'>X·ª≠ l√Ω d·ªØ li·ªáu b·ªã thi·∫øu</div>", unsafe_allow_html=True)
    method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω d·ªØ li·ªáu b·ªã thi·∫øu", ["Mean", "Median", "Mode"], key="missing_method")
    for col in df.columns:
        if df[col].isnull().any():
            if df[col].dtype in ['int64', 'float64']:
                if method == "Mean":
                    df[col].fillna(df[col].mean(), inplace=True)
                elif method == "Median":
                    df[col].fillna(df[col].median(), inplace=True)
            else:
                df[col].fillna(df[col].mode()[0], inplace=True)
                # Chuy·ªÉn DataFrame th√†nh HTML v·ªõi class ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng



    draw_table(df)
    return df

def binning_and_smoothing(df, column):
    st.markdown("<div class='step-title'>Kh·ª≠ nhi·ªÖu b·∫±ng Binning v√† Smoothing</div>", unsafe_allow_html=True)
    bin_width = st.slider("Ch·ªçn ƒë·ªô r·ªông m·ªói bin", min_value=5, max_value=20, value=20)
    bins = list(range(0, int(df[column].max()) + bin_width, bin_width))
    labels = [f"({bins[i]},{bins[i+1]}]" for i in range(len(bins)-1)]
    df["Binned_" + column] = pd.cut(df[column], bins=bins, labels=labels, include_lowest=True)
    smoothing_values = df.groupby("Binned_" + column)[column].mean()
    df["Smoothed_" + column] = df["Binned_" + column].map(smoothing_values)
                    # Chuy·ªÉn DataFrame th√†nh HTML v·ªõi class ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng
    draw_table(df[[column, "Binned_" + column, "Smoothed_" + column]])
    return df




def discretize_column(df, column):
    st.markdown("<div class='step-title'>R·ªùi r·∫°c h√≥a thu·ªôc t√≠nh</div>", unsafe_allow_html=True)
    bins = st.slider("S·ªë l∆∞·ª£ng bins", min_value=3, max_value=10, value=4)
    labels = [f"Group {i+1}" for i in range(bins)]
    df["Discretized_" + column] = pd.cut(df[column], bins=bins, labels=labels)

    draw_table(df[[column, "Discretized_" + column]])
    return df

def one_hot_encoding(df, column):
    st.markdown("<div class='step-title'>One-hot Encoding cho thu·ªôc t√≠nh</div>", unsafe_allow_html=True)
    encoder = OneHotEncoder(sparse=False)
    encoded = encoder.fit_transform(df[[column]])
    encoded_df = pd.DataFrame(encoded, columns=encoder.get_feature_names_out([column]))
    df = pd.concat([df, encoded_df], axis=1)

    draw_table(df)
    return df

def min_max_normalization(df, column):
    st.markdown("<div class='step-title'>Chu·∫©n h√≥a d·ªØ li·ªáu b·∫±ng Min-Max Normalization</div>", unsafe_allow_html=True)
    scaler = MinMaxScaler()
    df[column + "_Normalized"] = scaler.fit_transform(df[[column]])

    # Chuy·ªÉn DataFrame th√†nh HTML v·ªõi class ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng
    draw_table(df[[column, column + "_Normalized"]])
    return df


def app():

        # Header v·ªõi CSS container
    st.subheader("1Ô∏è‚É£. Ch·ªçn t·ªáp tin:")
    uploaded_file = st.file_uploader("T·∫£i file d·ªØ li·ªáu CSV", type="csv")

    if uploaded_file:
        df = pd.read_csv(uploaded_file)
        st.info("D·ªØ li·ªáu ƒë√£ t·∫£i l√™n:")

        # Chuy·ªÉn DataFrame th√†nh HTML v·ªõi class ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng
        # st.markdown(custom_data_table_css, unsafe_allow_html=True)
        draw_table(df)
        # Button to trigger the dialog

        st.subheader("2Ô∏è‚É£. X·ª≠ l√Ω d·ªØ li·ªáu")
        # Th·ª±c hi·ªán c√°c b∆∞·ªõc x·ª≠ l√Ω
        with st.container(border = 1):
            step1 = st.checkbox("1. X√°c ƒë·ªãnh lo·∫°i thu·ªôc t√≠nh")
            if step1:
                identify_data_types(df)
        with st.container(border=1):
            step2 = st.checkbox("2. X·ª≠ l√Ω d·ªØ li·ªáu b·ªã thi·∫øu")
            if step2:
                df = fill_missing_values(df)
        with st.container(border=1):
            step3 = st.checkbox("3. Kh·ª≠ nhi·ªÖu (Binning & Smoothing)")
            if step3:
                column = st.selectbox("Ch·ªçn c·ªôt d·ªØ li·ªáu s·ªë", df.select_dtypes(include=['int64', 'float64']).columns)
                df = binning_and_smoothing(df, column)
        with st.container(border=1):
            step4 = st.checkbox("4. R·ªùi r·∫°c h√≥a d·ªØ li·ªáu")
            if step4:
                column = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ r·ªùi r·∫°c h√≥a", df.select_dtypes(include=['int64', 'float64']).columns, key="discretize")
                df = discretize_column(df, column)
        with st.container(border=1):
            step5 = st.checkbox("5. One-hot Encoding")
            if step5:
                column = st.selectbox("Ch·ªçn c·ªôt categorical ƒë·ªÉ encoding", df.select_dtypes(include=['object']).columns)
                df = one_hot_encoding(df, column)
        with st.container(border=1):
            step6 = st.checkbox("6. Chu·∫©n h√≥a d·ªØ li·ªáu")
            if step6:
                column = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ chu·∫©n h√≥a", df.select_dtypes(include=['int64', 'float64']).columns, key="normalize")
                df = min_max_normalization(df, column)

        # T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
        st.subheader("3Ô∏è‚É£. T·∫£i xu·ªëng d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
        processed_csv = df.to_csv(index=False).encode("utf-8-sig")
        if st.download_button("T·∫£i file CSV", data=processed_csv, file_name="processed_data.csv", mime="text/csv"):
            st.toast('T·∫£i xu·ªëng th√†nh c√¥ng!', icon='üòç')
    else:
        st.warning("‚ú® Vui l√≤ng t·∫£i file CSV ƒë·ªÉ ti·∫øp t·ª•c! ‚ú®")